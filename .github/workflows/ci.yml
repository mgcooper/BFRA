name: Tests

# note: paths are relative to top level, including actions/, matlab-actions/ etc.

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull requests for the specified branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository
        uses: actions/checkout@v3
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v1
        # release: r2020b
        # uses: matlab-actions/setup-matlab@v1.2.4

      # Runs a set of commands using the runners shell
      - name: Run tests and generate artifacts
        uses: matlab-actions/run-tests@v1
        with:
          source-folder: +bfra
          # select-by-tag: Unit
          select-by-folder: +bfra/+test
          test-results-junit: test-results/results.xml
          code-coverage-cobertura: test-results/coverage.xml # mgc put them in one folder
          # code-coverage-cobertura: code-coverage/coverage.xml
          # test-results-pdf: test-results/results.pdf # supported on macOS with R2020b and later
          # output-detail: concise # none, terse, concise, detailed, or verbose, default is detailed for fails and concise otherwise
          # logging-level: terse # same as above

      # As an alternative to run-tests, you can use run-command to execute a MATLAB script, function, or statement.
      #- name: Run all tests
      #  uses: matlab-actions/run-command@v1
      #  with:
      #    command: addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
